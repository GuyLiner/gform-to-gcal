import os.path
from datetime import datetime
import argparse
import time
import gspread
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

parser = argparse.ArgumentParser(
                    prog='gcm',
                    description='Converts a google sheet full of event dates to events on a google calendar')

parser.add_argument('-d',
                    '--delete_all_gcm_events',
                    action='store_true')
parser.add_argument('-a',
                    '--add_all_gcm_events',
                    action='store_true')

parser.add_argument('-l',
                    '--list_all_gcm_events',
                    action='store_true')
args = parser.parse_args()

SCOPES = ["https://www.googleapis.com/auth/calendar.events", "https://www.googleapis.com/auth/calendar.readonly"]
creds = None

# The file token.json stores the user's access and refresh tokens, and is
# created automatically when the authorization flow completes for the first
# time.
if os.path.exists("token.json"):
    creds = Credentials.from_authorized_user_file("token.json", SCOPES)
# If there are no (valid) credentials available, let the user log in.
if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_secrets_file(
          "credentials.json", SCOPES
        )
        creds = flow.run_local_server(port=0)
    # Save the credentials for the next run
    with open("token.json", "w") as token:
        token.write(creds.to_json())


service = build("calendar", "v3", credentials=creds)
gc = gspread.service_account()
sht2 = gc.open_by_url('https://docs.google.com/spreadsheets/d/1Dj99pC-QvrPoNLg7Aak5ySJlg-LkQLXRNyTFIZMoKHo/edit?gid=0#gid=0')

worksheet = sht2.get_worksheet(0)
num_events = len(worksheet.col_values(1)) - 1
CALENDAR = "07938764326805f3211ebb1c98ac9a66b2fe432772157a652a00b0cd3f7da6dd@group.calendar.google.com"
GCM_EVENT_TAG = "Generated by gcm"

if args.add_all_gcm_events:
    for i in range(2, num_events):
        row = worksheet.row_values(i)
        date = datetime.strptime(row[6], "%m/%d/%y")
        name = f"{row[0]}"
        city = f"{row[1]}"
        type_ = f"{row[2]}"

        event = {
          'summary': f"{type_}: {name}",
          'description': "Generated by gcm",
          'location': f"{city}",
          'start': {
                'date': date.strftime("%Y-%m-%d"),
          },
          'end': {
            'date': date.strftime("%Y-%m-%d"),
          },
        }

        time.sleep(0.9)
        event = service.events().insert(calendarId=CALENDAR, body=event).execute()
        print(f"Event created: {event.get('htmlLink')}")

if args.delete_all_gcm_events:
    page_token = None
    while True:
        events = service.events().list(calendarId=CALENDAR,
                                       pageToken=page_token).execute()
        for event in events['items']:
            if event['description'] == GCM_EVENT_TAG:
                service.events().delete(calendarId=CALENDAR, eventId=event['id']).execute()
                print(f"Deleted Event: {event['summary']}")
        page_token = events.get('nextPageToken')
        if not page_token:
            break

if args.list_all_gcm_events:
    page_token = None
    while True:
        events = service.events().list(calendarId=CALENDAR,
                                       pageToken=page_token).execute()
        for event in events['items']:
            if event['description'] == GCM_EVENT_TAG:
                print(event['summary'])
        page_token = events.get('nextPageToken')
        if not page_token:
            break
